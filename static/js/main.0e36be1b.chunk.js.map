{"version":3,"sources":["Preview.js","Speed.js","App.js","getText.js","reportWebVitals.js","index.js"],"names":["props","text","split","className","map","s","i","color","userInput","length","style","backgroundColor","symbols","sec","wpm","Math","round","initialState","words","require","word","floor","random","slice","getText","started","finished","App","state","onRestart","setState","onUserInputChange","e","v","target","value","setTimer","onFinish","countCorrectSymbols","this","clearInterval","interval","replace","filter","setInterval","prevProps","Preview","onChange","placeholder","readOnly","Speed","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEe,WAACA,GAEZ,IAAMC,EAAOD,EAAMC,KAAKC,MAAM,IAE9B,OACI,qBAAKC,UAAU,0BAAf,SAEQF,EAAKG,KAAI,SAACC,EAAEC,GACR,IAAIC,EAIJ,OAHID,EAAIN,EAAMQ,UAAUC,SACpBF,EAAQF,IAAML,EAAMQ,UAAUF,GAAK,UAAY,WAE5C,sBAAcI,MAAO,CAACC,gBAAiBJ,GAAvC,SAAgDF,GAArCC,SCXvB,WAACN,GAEd,GAAsB,IAAlBA,EAAMY,SAA+B,IAAdZ,EAAMa,IAAW,CAC1C,IAAMC,EAAOd,EAAMY,QAAQ,GAAMZ,EAAMa,IAAI,IAC3C,OACE,gCAAME,KAAKC,MAAMF,GAAjB,UAIJ,OAAO,MCPHG,EAAe,CACnBhB,KCJa,WAIX,IAFA,IAAIiB,EAAQC,EAAQ,IAChBlB,EAAO,GACFK,EAAI,EAAGA,EAAI,GAAIA,IAAI,CACxB,IAAIc,EAAOF,EAAMH,KAAKM,MAAMN,KAAKO,SAASJ,EAAMT,SAC7CW,EAAKX,OAAS,EACbR,GAAQmB,EAAO,IAGfd,IAIR,OAAOL,EAAKsB,MAAM,GAAI,GDVlBC,GACNhB,UAAW,GACXI,QAAS,EACTC,IAAK,EACLY,SAAS,EACTC,UAAU,GAsEGC,E,4MAjEbC,MAAQX,E,EAERY,UAAY,WACV,EAAKC,SAASb,I,EAGhBc,kBAAoB,SAACC,GACnB,IAAMC,EAAID,EAAEE,OAAOC,MACnB,EAAKC,WACL,EAAKC,SAASJ,GACd,EAAKH,SAAS,CACZtB,UAAWyB,EACXrB,QAAS,EAAK0B,oBAAoBL,M,uDAI7BzB,GACHA,IAAc+B,KAAKX,MAAM3B,OAC3BuC,cAAcD,KAAKE,UACnBF,KAAKT,SAAS,CACZJ,UAAU,O,0CAKIlB,GAClB,IAAMP,EAAOsC,KAAKX,MAAM3B,KAAKyC,QAAQ,IAAK,IAC1C,OAAOlC,EAAUkC,QAAQ,IAAK,IAAIxC,MAAM,IAAIyC,QAAO,SAACtC,EAAEC,GAAH,OAASD,IAAMJ,EAAKK,MAAIG,S,iCAGjE,IAAD,OACJ8B,KAAKX,MAAMH,UACdc,KAAKT,SAAS,CAACL,SAAS,IACxBc,KAAKE,SAAWG,aAAY,WAC1B,EAAKd,UAAS,SAAAe,GACZ,MAAO,CAAChC,IAAKgC,EAAUhC,IAAM,QAE9B,Q,+BAKL,OACE,qBAAKV,UAAU,sBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UACE,cAAC2C,EAAD,CAAS7C,KAAMsC,KAAKX,MAAM3B,KAAMO,UAAW+B,KAAKX,MAAMpB,YACtD,0BACE2B,MAAOI,KAAKX,MAAMpB,UAClBuC,SAAUR,KAAKR,kBACf5B,UAAU,oBACV6C,YAAY,kBACZC,SAAUV,KAAKX,MAAMF,WAEvB,cAACwB,EAAD,CAAOrC,IAAK0B,KAAKX,MAAMf,IAAKD,QAAS2B,KAAKX,MAAMhB,UAChD,qBAAKT,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAiBgD,QAASZ,KAAKV,UAAjD,kC,GA1DIuB,aEFHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e36be1b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default (props) => {\n\n    const text = props.text.split(''); // make user input to array for maping \n\n    return (\n        <div className=\"border rounded p-3 mb-4\">\n            {\n                text.map((s,i) => {\n                    let color;\n                    if (i < props.userInput.length){\n                        color = s === props.userInput[i] ? '#dfffa0' : '#fcbea4';\n                    }\n                    return <span key={i} style={{backgroundColor: color}}>{s}</span> \n                })\n            }\n        </div>\n    )\n}"," \nimport React from 'react';\n\nexport default (props) => {\n\n  if (props.symbols !== 0 && props.sec !== 0) {\n    const wpm = (props.symbols/5) / (props.sec/60);\n    return (\n      <div>{Math.round(wpm)} wpm</div>\n    )\n  }\n  \n  return null;\n}","import React, { Component } from 'react';\nimport Preview from './Preview';\nimport Speed from './Speed';\nimport getText from './getText';\n\nconst initialState = {\n  text: getText(),\n  userInput: '',\n  symbols: 0,\n  sec: 0,\n  started: false,\n  finished: false\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  onRestart = () => {\n    this.setState(initialState)\n  }\n\n  onUserInputChange = (e) => {\n    const v = e.target.value;\n    this.setTimer();\n    this.onFinish(v)\n    this.setState({\n      userInput: v,\n      symbols: this.countCorrectSymbols(v)\n    })\n  }\n\n  onFinish(userInput) {\n    if (userInput === this.state.text) {\n      clearInterval(this.interval);\n      this.setState({\n        finished: true\n      })\n    }\n  }\n\n  countCorrectSymbols(userInput) {\n    const text = this.state.text.replace(' ', '');\n    return userInput.replace(' ', '').split('').filter((s,i) => s === text[i]).length;\n  }\n\n  setTimer() {\n    if (!this.state.started) {\n      this.setState({started: true});\n      this.interval = setInterval(() => {\n        this.setState(prevProps => {\n          return {sec: prevProps.sec + 1}\n        })\n      }, 1000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5 mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            <Preview text={this.state.text} userInput={this.state.userInput}/>\n            <textarea\n              value={this.state.userInput}\n              onChange={this.onUserInputChange}\n              className=\"form-control mb-3\"\n              placeholder=\"Start typing...\"\n              readOnly={this.state.finished}\n            ></textarea>\n            <Speed sec={this.state.sec} symbols={this.state.symbols}/>\n            <div className=\"text-right\">\n              <button className=\"btn btn-danger\" onClick={this.onRestart}>Restart</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","\n\nexport default () => {\n\n    let words = require('an-array-of-english-words')\n    let text = '';\n    for (var i = 0; i < 50; i++){\n        let word = words[Math.floor(Math.random()*words.length)];\n        if(word.length < 6){\n            text += word + \" \"\n        }\n        else {\n            i--;\n        } \n    }\n\n    return text.slice(0, -1);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}